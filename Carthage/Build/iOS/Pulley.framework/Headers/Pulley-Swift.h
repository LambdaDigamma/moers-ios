#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Pulley",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class PulleyViewController;

/// The base delegate protocol for Pulley delegates.
SWIFT_PROTOCOL("_TtP6Pulley14PulleyDelegate_")
@protocol PulleyDelegate
@optional
/// This is called after size changes, so if you care about the bottomSafeArea property for custom UI layout, you can use this value.
/// * NOTE: It’s not called <em>during</em> the transition between sizes (such as in an animation coordinator), but rather after the resize is complete.
- (void)drawerPositionDidChangeWithDrawer:(PulleyViewController * _Nonnull)drawer bottomSafeArea:(CGFloat)bottomSafeArea;
/// Make UI adjustments for when Pulley goes to ‘fullscreen’. Bottom safe area is provided for your convenience.
- (void)makeUIAdjustmentsForFullscreenWithProgress:(CGFloat)progress bottomSafeArea:(CGFloat)bottomSafeArea;
/// Make UI adjustments for changes in the drawer’s distance-to-bottom. Bottom safe area is provided for your convenience.
- (void)drawerChangedDistanceFromBottomWithDrawer:(PulleyViewController * _Nonnull)drawer distance:(CGFloat)distance bottomSafeArea:(CGFloat)bottomSafeArea;
/// Called when the current drawer display mode changes (leftSide vs bottomDrawer). Make UI changes to account for this here.
- (void)drawerDisplayModeDidChangeWithDrawer:(PulleyViewController * _Nonnull)drawer;
@end

@class PulleyPosition;

/// View controllers in the drawer can implement this to receive changes in state or provide values for the different drawer positions.
SWIFT_PROTOCOL("_TtP6Pulley34PulleyDrawerViewControllerDelegate_")
@protocol PulleyDrawerViewControllerDelegate <PulleyDelegate>
@optional
/// Provide the collapsed drawer height for Pulley. Pulley does NOT automatically handle safe areas for you, however: bottom safe area is provided for your convenience in computing a value to return.
- (CGFloat)collapsedDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
/// Provide the partialReveal drawer height for Pulley. Pulley does NOT automatically handle safe areas for you, however: bottom safe area is provided for your convenience in computing a value to return.
- (CGFloat)partialRevealDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
/// Return the support drawer positions for your drawer.
- (NSArray<PulleyPosition *> * _Nonnull)supportedDrawerPositions SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a Pulley drawer position.
/// <ul>
///   <li>
///     collapsed:         When the drawer is in its smallest form, at the bottom of the screen.
///   </li>
///   <li>
///     partiallyRevealed: When the drawer is partially revealed.
///   </li>
///   <li>
///     open:              When the drawer is fully open.
///   </li>
///   <li>
///     closed:            When the drawer is off-screen at the bottom of the view. Note: Users cannot close or reopen the drawer on their own. You must set this programatically
///   </li>
/// </ul>
SWIFT_CLASS("_TtC6Pulley14PulleyPosition")
@interface PulleyPosition : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// View controllers that are the main content can implement this to receive changes in state.
SWIFT_PROTOCOL("_TtP6Pulley38PulleyPrimaryContentControllerDelegate_")
@protocol PulleyPrimaryContentControllerDelegate <PulleyDelegate>
@end

@class UIView;
@class UIColor;
@class NSCoder;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

SWIFT_CLASS("_TtC6Pulley20PulleyViewController")
@interface PulleyViewController : UIViewController <PulleyDrawerViewControllerDelegate>
/// When using with Interface Builder only! Connect a containing view to this outlet.
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified primaryContentContainerView;
/// When using with Interface Builder only! Connect a containing view to this outlet.
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified drawerContentContainerView;
/// The inset from the top safe area when the drawer is fully open. This property is only for the ‘drawer’ displayMode. Use panelInsets to control the top/bottom/left/right insets for the panel.
@property (nonatomic) CGFloat drawerTopInset;
/// This replaces the previous panelInsetLeft and panelInsetTop properties. Depending on what corner placement is being used, different values from this struct will apply. For example, ‘topLeft’ corner placement will utilize the .top, .left, and .bottom inset properties and it will ignore the .right property (use panelWidth property to specify width)
@property (nonatomic) UIEdgeInsets panelInsets;
/// The width of the panel in panel displayMode
@property (nonatomic) CGFloat panelWidth;
/// The corner radius for the drawer.
/// Note: This property is ignored if your drawerContentViewController’s view.layer.mask has a custom mask applied using a CAShapeLayer.
/// Note: Custom CAShapeLayer as your drawerContentViewController’s view.layer mask will override Pulley’s internal corner rounding and use that mask as the drawer mask.
@property (nonatomic) CGFloat drawerCornerRadius;
/// The opacity of the drawer shadow.
@property (nonatomic) float shadowOpacity;
/// The radius of the drawer shadow.
@property (nonatomic) CGFloat shadowRadius;
/// The offset of the drawer shadow.
@property (nonatomic) CGSize shadowOffset;
/// The opaque color of the background dimming view.
@property (nonatomic, strong) UIColor * _Nonnull backgroundDimmingColor;
/// The maximum amount of opacity when dimming.
@property (nonatomic) CGFloat backgroundDimmingOpacity;
/// The drawer scrollview’s delaysContentTouches setting
@property (nonatomic) BOOL delaysContentTouches;
/// The drawer scrollview’s canCancelContentTouches setting
@property (nonatomic) BOOL canCancelContentTouches;
/// This is here exclusively to support IBInspectable in Interface Builder because Interface Builder can’t deal with enums. If you’re doing this in code use the -initialDrawerPosition property instead. Available strings are: open, closed, partiallyRevealed, collapsed
@property (nonatomic, copy) NSString * _Nullable initialDrawerPositionFromIB;
/// Whether the drawer’s position can be changed by the user. If set to <code>false</code>, the only way to move the drawer is programmatically. Defaults to <code>true</code>.
@property (nonatomic) BOOL allowsUserDrawerPositionChange;
/// The animation duration for setting the drawer position
@property (nonatomic) NSTimeInterval animationDuration;
/// The animation delay for setting the drawer position
@property (nonatomic) NSTimeInterval animationDelay;
/// The spring damping for setting the drawer position
@property (nonatomic) CGFloat animationSpringDamping;
/// The spring’s initial velocity for setting the drawer position
@property (nonatomic) CGFloat animationSpringInitialVelocity;
/// This setting allows you to enable/disable Pulley automatically insetting the drawer on the left/right when in ‘bottomDrawer’ display mode in a horizontal orientation on a device with a ‘notch’ or other left/right obscurement.
@property (nonatomic) BOOL adjustDrawerHorizontalInsetToSafeArea;
/// Initialize the drawer controller from Interface Builder.
/// note:
/// Usage notes: Make 2 container views in Interface Builder and connect their outlets to -primaryContentContainerView and -drawerContentContainerView. Then use embed segues to place your content/drawer view controllers into the appropriate container.
/// \param aDecoder The NSCoder to decode from.
///
///
/// returns:
/// A newly created Pulley drawer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (CGFloat)collapsedDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)partialRevealDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
- (NSArray<PulleyPosition *> * _Nonnull)supportedDrawerPositions SWIFT_WARN_UNUSED_RESULT;
- (void)drawerPositionDidChangeWithDrawer:(PulleyViewController * _Nonnull)drawer bottomSafeArea:(CGFloat)bottomSafeArea;
- (void)makeUIAdjustmentsForFullscreenWithProgress:(CGFloat)progress bottomSafeArea:(CGFloat)bottomSafeArea;
- (void)drawerChangedDistanceFromBottomWithDrawer:(PulleyViewController * _Nonnull)drawer distance:(CGFloat)distance bottomSafeArea:(CGFloat)bottomSafeArea;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class UIScrollView;

@interface PulleyViewController (SWIFT_EXTENSION(Pulley)) <UIScrollViewDelegate>
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Pulley",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class PulleyViewController;

/// The base delegate protocol for Pulley delegates.
SWIFT_PROTOCOL("_TtP6Pulley14PulleyDelegate_")
@protocol PulleyDelegate
@optional
/// This is called after size changes, so if you care about the bottomSafeArea property for custom UI layout, you can use this value.
/// * NOTE: It’s not called <em>during</em> the transition between sizes (such as in an animation coordinator), but rather after the resize is complete.
- (void)drawerPositionDidChangeWithDrawer:(PulleyViewController * _Nonnull)drawer bottomSafeArea:(CGFloat)bottomSafeArea;
/// Make UI adjustments for when Pulley goes to ‘fullscreen’. Bottom safe area is provided for your convenience.
- (void)makeUIAdjustmentsForFullscreenWithProgress:(CGFloat)progress bottomSafeArea:(CGFloat)bottomSafeArea;
/// Make UI adjustments for changes in the drawer’s distance-to-bottom. Bottom safe area is provided for your convenience.
- (void)drawerChangedDistanceFromBottomWithDrawer:(PulleyViewController * _Nonnull)drawer distance:(CGFloat)distance bottomSafeArea:(CGFloat)bottomSafeArea;
/// Called when the current drawer display mode changes (leftSide vs bottomDrawer). Make UI changes to account for this here.
- (void)drawerDisplayModeDidChangeWithDrawer:(PulleyViewController * _Nonnull)drawer;
@end

@class PulleyPosition;

/// View controllers in the drawer can implement this to receive changes in state or provide values for the different drawer positions.
SWIFT_PROTOCOL("_TtP6Pulley34PulleyDrawerViewControllerDelegate_")
@protocol PulleyDrawerViewControllerDelegate <PulleyDelegate>
@optional
/// Provide the collapsed drawer height for Pulley. Pulley does NOT automatically handle safe areas for you, however: bottom safe area is provided for your convenience in computing a value to return.
- (CGFloat)collapsedDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
/// Provide the partialReveal drawer height for Pulley. Pulley does NOT automatically handle safe areas for you, however: bottom safe area is provided for your convenience in computing a value to return.
- (CGFloat)partialRevealDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
/// Return the support drawer positions for your drawer.
- (NSArray<PulleyPosition *> * _Nonnull)supportedDrawerPositions SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents a Pulley drawer position.
/// <ul>
///   <li>
///     collapsed:         When the drawer is in its smallest form, at the bottom of the screen.
///   </li>
///   <li>
///     partiallyRevealed: When the drawer is partially revealed.
///   </li>
///   <li>
///     open:              When the drawer is fully open.
///   </li>
///   <li>
///     closed:            When the drawer is off-screen at the bottom of the view. Note: Users cannot close or reopen the drawer on their own. You must set this programatically
///   </li>
/// </ul>
SWIFT_CLASS("_TtC6Pulley14PulleyPosition")
@interface PulleyPosition : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// View controllers that are the main content can implement this to receive changes in state.
SWIFT_PROTOCOL("_TtP6Pulley38PulleyPrimaryContentControllerDelegate_")
@protocol PulleyPrimaryContentControllerDelegate <PulleyDelegate>
@end

@class UIView;
@class UIColor;
@class NSCoder;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

SWIFT_CLASS("_TtC6Pulley20PulleyViewController")
@interface PulleyViewController : UIViewController <PulleyDrawerViewControllerDelegate>
/// When using with Interface Builder only! Connect a containing view to this outlet.
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified primaryContentContainerView;
/// When using with Interface Builder only! Connect a containing view to this outlet.
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified drawerContentContainerView;
/// The inset from the top safe area when the drawer is fully open. This property is only for the ‘drawer’ displayMode. Use panelInsets to control the top/bottom/left/right insets for the panel.
@property (nonatomic) CGFloat drawerTopInset;
/// This replaces the previous panelInsetLeft and panelInsetTop properties. Depending on what corner placement is being used, different values from this struct will apply. For example, ‘topLeft’ corner placement will utilize the .top, .left, and .bottom inset properties and it will ignore the .right property (use panelWidth property to specify width)
@property (nonatomic) UIEdgeInsets panelInsets;
/// The width of the panel in panel displayMode
@property (nonatomic) CGFloat panelWidth;
/// The corner radius for the drawer.
/// Note: This property is ignored if your drawerContentViewController’s view.layer.mask has a custom mask applied using a CAShapeLayer.
/// Note: Custom CAShapeLayer as your drawerContentViewController’s view.layer mask will override Pulley’s internal corner rounding and use that mask as the drawer mask.
@property (nonatomic) CGFloat drawerCornerRadius;
/// The opacity of the drawer shadow.
@property (nonatomic) float shadowOpacity;
/// The radius of the drawer shadow.
@property (nonatomic) CGFloat shadowRadius;
/// The offset of the drawer shadow.
@property (nonatomic) CGSize shadowOffset;
/// The opaque color of the background dimming view.
@property (nonatomic, strong) UIColor * _Nonnull backgroundDimmingColor;
/// The maximum amount of opacity when dimming.
@property (nonatomic) CGFloat backgroundDimmingOpacity;
/// The drawer scrollview’s delaysContentTouches setting
@property (nonatomic) BOOL delaysContentTouches;
/// The drawer scrollview’s canCancelContentTouches setting
@property (nonatomic) BOOL canCancelContentTouches;
/// This is here exclusively to support IBInspectable in Interface Builder because Interface Builder can’t deal with enums. If you’re doing this in code use the -initialDrawerPosition property instead. Available strings are: open, closed, partiallyRevealed, collapsed
@property (nonatomic, copy) NSString * _Nullable initialDrawerPositionFromIB;
/// Whether the drawer’s position can be changed by the user. If set to <code>false</code>, the only way to move the drawer is programmatically. Defaults to <code>true</code>.
@property (nonatomic) BOOL allowsUserDrawerPositionChange;
/// The animation duration for setting the drawer position
@property (nonatomic) NSTimeInterval animationDuration;
/// The animation delay for setting the drawer position
@property (nonatomic) NSTimeInterval animationDelay;
/// The spring damping for setting the drawer position
@property (nonatomic) CGFloat animationSpringDamping;
/// The spring’s initial velocity for setting the drawer position
@property (nonatomic) CGFloat animationSpringInitialVelocity;
/// This setting allows you to enable/disable Pulley automatically insetting the drawer on the left/right when in ‘bottomDrawer’ display mode in a horizontal orientation on a device with a ‘notch’ or other left/right obscurement.
@property (nonatomic) BOOL adjustDrawerHorizontalInsetToSafeArea;
/// Initialize the drawer controller from Interface Builder.
/// note:
/// Usage notes: Make 2 container views in Interface Builder and connect their outlets to -primaryContentContainerView and -drawerContentContainerView. Then use embed segues to place your content/drawer view controllers into the appropriate container.
/// \param aDecoder The NSCoder to decode from.
///
///
/// returns:
/// A newly created Pulley drawer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (CGFloat)collapsedDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)partialRevealDrawerHeightWithBottomSafeArea:(CGFloat)bottomSafeArea SWIFT_WARN_UNUSED_RESULT;
- (NSArray<PulleyPosition *> * _Nonnull)supportedDrawerPositions SWIFT_WARN_UNUSED_RESULT;
- (void)drawerPositionDidChangeWithDrawer:(PulleyViewController * _Nonnull)drawer bottomSafeArea:(CGFloat)bottomSafeArea;
- (void)makeUIAdjustmentsForFullscreenWithProgress:(CGFloat)progress bottomSafeArea:(CGFloat)bottomSafeArea;
- (void)drawerChangedDistanceFromBottomWithDrawer:(PulleyViewController * _Nonnull)drawer distance:(CGFloat)distance bottomSafeArea:(CGFloat)bottomSafeArea;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class UIScrollView;

@interface PulleyViewController (SWIFT_EXTENSION(Pulley)) <UIScrollViewDelegate>
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
